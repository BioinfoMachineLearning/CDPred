# -*- coding: utf-8 -*-
"""Extract_contact

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MmY8VN2v7KQzklmy8RZFJwEtrXsBmxUB
"""

import sys
from rosetta import *
from pyrosetta import *
from rosetta.protocols.rigid import *
from rosetta.core.scoring import *
from pyrosetta import PyMOLMover
from rosetta.protocols.rigid import *
import pyrosetta.rosetta.protocols.rigid as rigid_moves

import os
import sys
import glob
import numpy as np

init()

#pdbs_dir = sys.argv[1]
#outputs_dir = sys.argv[2]

pdbs_dir = '/home/esdft/Downloads/pdbs/true_pdbs/'
outputs_dir = '/home/esdft/Downloads/output_distance/'


def find_dist(pose, res_i, res_j):
 
  atm_i = 'CA' if pose.residue(res_i).name()[0:3] == 'GLY' else 'CB'
  atm_j = 'CA' if pose.residue(res_j).name()[0:3] == 'GLY'  else 'CB'
 
  xyz_i = pose.residue(res_i).xyz(atm_i)
  xyz_j = pose.residue(res_j).xyz(atm_j)
 
    
  dist = (xyz_i - xyz_j).norm()
    
  return dist

def get_length_of_chains(pdb_file, output_dir):
  
  pose = pyrosetta.pose_from_pdb(pdb_file)
  print(pose.num_chains())


  start_A = pose.conformation().chain_begin(1)
  end_A = pose.conformation().chain_end(1)

  start_B = pose.conformation().chain_begin(2)
  end_B = pose.conformation().chain_end(2)

  fasta_A = pose.sequence()[start_A-1:end_A]
  fasta_B = pose.sequence()[start_B-1:end_B]

  print(fasta_A == fasta_B)
  print(fasta_A, len(fasta_A))
  print(fasta_B, len(fasta_B))


  pdb_name = os.path.basename(pdb_file)
  target_id =pdb_name.split('.')[0]

  file_path = output_dir + '/' + 'length_capri_dataset.txt'

  with open(file_path, 'a') as f:
    f.write(target_id)
    f.write('\t')

    f.write(str(len(fasta_A)))
    f.write('\t')

    f.write(str(len(fasta_B)))
    f.write('\t')

    f.write(target_id.split('_')[0][-1])
    f.write(', ')

    f.write(target_id.split('_')[1][-1])
    f.write('\n')


def get_residues_of_chains(pdb_file, output_dir):
  
  pose = pyrosetta.pose_from_pdb(pdb_file)
  print(pose.num_chains())


  start_A = pose.conformation().chain_begin(1)
  end_A = pose.conformation().chain_end(1)

  start_B = pose.conformation().chain_begin(2)
  end_B = pose.conformation().chain_end(2)

  fasta_A = pose.sequence()[start_A-1:end_A]
  fasta_B = pose.sequence()[start_B-1:end_B]

  print(fasta_A == fasta_B)
  print(fasta_A, len(fasta_A))
  print(fasta_B, len(fasta_B))


  pdb_name = os.path.basename(pdb_file)
  target_id =pdb_name.split('.')[0]

  file_path = output_dir + '/' + target_id + '.rr'
  with open(file_path, 'w') as f:
    f.write(fasta_A)
    f.write('\n')
    #f.write(fasta_B)
    #f.write('\n')


  for i in range(start_A, end_A+1):
    for j in range(start_B, end_B+1):
      dist = find_dist(pose, i, j)


      with open(file_path, 'a') as f:

        #if dist <= 8:
        if dist > 0:
          f.write(str(pose.pdb_info().number(i)))
          f.write(' ')
          f.write(str(pose.pdb_info().number(j)))
          f.write(' ')
          f.write(str(dist))

          f.write('\n')

#get_length_of_chains('/content/1BDY.clean.pdb', '/content')

#pdb_dir = '/storage/hpc/data/esdft/group_project/'
fileNames = glob.glob(pdbs_dir+'/*pdb')

for file_path in fileNames:
    print(file_path)
    target = file_name = os.path.basename(file_path).split('.')[0]
    pose = pyrosetta.pose_from_pdb(file_path)
    print(pose.total_residue())
    #print('/content/hetero_res_true/'+target+'.rr')

    get_residues_of_chains(file_path, outputs_dir)
    #get_length_of_chains(file_path, '/storage/hpc/data/esdft/')

# Commented out IPython magic to ensure Python compatibility.
#get_residues_of_chains('/storage/hpc/data/esdft/T0759A_T0759B.pdb', '/storage/hpc/data/esdft/')
